String gameState;
Button startButton;
Button helpButton;
Button catOne;
Button catTwo;
Button catThree;
Button catFour;
Button[] buttonArray = new Button[6];
int numFrames = 6;
int curFrame = 0;
Obstacle obs;
Player player;
boolean left,right,up,down,space;

PImage[] spriteImages;
PGraphics gif;
void setup(){
  fill(255);
  size(800,600);
  gameState = "START";
  PImage cat1 = loadImage("Cat1.png");
  player = new Player(false,cat1,width/2+100,height-150,100,100);
  obs = new Obstacle(300,460,200,200,"safe",null);
  buttonInit();
  //The key listener:⬅ ⬆ ➡ ⬇ space
  left = false;
  right = false;
  up = false;
  down = false;
  space = false;
  //Animation values
}
//Change the initial poision in this function
void buttonListener(){
  int index = -1;
  for(int i =0;i<buttonArray.length;i++){
    if(buttonArray[i].isClicked()){
      index = i;
    }
  }
  if(index > -1){
    //Change the game state according to the index:0:startButton 1:helpButton 2-5:car 1-4
    if(index == 0){
      gameState = "PLAY";
      //Set the initial position of the player
      player.setposX(0);
      player.setposY((float)height-100);
    }else if(index == 1){
      gameState = "HELP";
    }else{
      player = new Player(false,buttonArray[index].getCat(),width/2+100,buttonArray[index].getpos().y,buttonArray[index].getWidth(),buttonArray[index].getHeight());
    }
  }
}
//If you want ot create new buttons, Put them into buttonArray
void buttonInit(){
  startButton = new Button(width/2-50,height/3+30,100,50,"Start",0,200,0,null);
  buttonArray[0] = startButton;
  helpButton = new Button(width/2-50,height/3+90,100,50,"Help",0,200,0,null);
  buttonArray[1] =helpButton;
  PImage cat1 = loadImage("Cat1.png");
  PImage cat2 = loadImage("Cat2.png");
  PImage cat3 = loadImage("Cat3.png");
  PImage cat4 = loadImage("Cat4.png");
  catOne = new Button(0,height-150,100,100,"Start",0,200,0,cat1);
  buttonArray[2] =catOne;
  catTwo = new Button(100,height-150,100,100,"Start",0,200,0,cat2);
  buttonArray[3] =catTwo;
  catThree = new Button(200,height-150,100,100,"Start",0,200,0,cat3);
  buttonArray[4]= catThree;
  catFour = new Button(300,height-150,100,100,"Start",0,200,0,cat4);
  buttonArray[5]= catFour;
}
void draw(){
  clear();
  if(gameState == "START"){
    startGame();
  }else if(gameState == "PLAY"){
    playGame();
  }else if(gameState == "WIN"){
    winGame();
  }else if(gameState == "LOSE"){
    loseGame();
  }else if(gameState == "HELP"){
    helpMenu();
  }
}

void startGame(){
  textAlign(CENTER);
  textSize(25);
  fill(0,0,0);
  text("Cat adventure",width/2,height/3);
  for(Button button:buttonArray){
    button.update();
    button.renderButton();
  }
  player.renderPlayer();
  buttonListener();
}

void playGame(){
  player.collisionSide = sideOfCollisions(player,obs);
  player.update();
  player.renderPlayer();
  obs.display();
  displayPositionData();
}
void winGame(){}
void loseGame(){}
void helpMenu(){}

void clear(){
  fill(255);
  rect(0,0,width,height);
}

void displayPositionData() {
  fill(0);
  String s = "\nvx: "+player.getVelocityX()+"  vy: "+player.getVelocityY() + 
    "\ncollisionSide: "+player.collisionSide+"\nposX:"+player.getPosX()+"  posY: "+player.getPosY();
  text(s, 150, 50);
}

String sideOfCollisions(Player player,Obstacle obstacle){
  ////r1 is the player
  ////r2 is the platform rectangle
  ////function returns the String collisionSide

  //allow unicorn to pass through platforms.
  //Disable if you want unicorn to bounce off bottom of platforms
  float posY = player.getPosY();
  float posX = player.getPosX();
  if (player.getVelocityY() < 0) { return "none"; }

  float dx = (player.getPosX()+player.getWidth()/2) - (obstacle.x+obstacle.w/2);
  float dy = (player.getPosY()+player.getHeight()/2) - (obstacle.y+obstacle.h/2);

  float combinedHalfWidths =player.halfWidth + obstacle.halfWidth;
  float combinedHalfHeights = player.halfHeight + obstacle.halfHeight;

  if (abs(dx) < combinedHalfWidths) {
    ////collision has happened on the x axis
    ////now check on the y axis
    if (abs(dy) < combinedHalfHeights) {
      ////collision detected
      //determine the overlap on each axis
      float overlapX = combinedHalfWidths - abs(dx);
      float overlapY = combinedHalfHeights - abs(dy);
      ////the collision is on the axis with the
      ////SMALLEST overlap
      if (overlapX >= overlapY) {
        if (dy > 0) {
          ////move the rectangle back to eliminate overlap
          ////before calling its display to prevent
          ////drawing object inside each other
          posY += overlapY;
          player.setposY(posY);
          return "top";
        } else {
          posY -= overlapY;
          player.setposY(posY);
          return "bottom";
        }
      } else {
        if (dx > 0) {
          posX += overlapX;
          player.setposX(posX);
          return "left";
        } else {
          posX -= overlapX;
          player.setposX(posX);
          return "right";
        }
      }
    } else {
      //collision failed on the y axis
      return "none";
    }
  } else {
    //collision failed on the x axis
    return "none";
  }
}

//Keyboard monitor
void keyPressed() {
  switch (keyCode) {
  case 37://left
    left = true;
    break;
  case 39://right
    right = true;
    break;
  case 38://up
    up = true;
    break;
  case 40://down
    down = true;
    break;
  case 32: //space
    space = true;
    break;
  }
}
void keyReleased() {
  switch (keyCode) {
  case 37://left
    left = false;
    break;
  case 39://right
    right = false;
    break;
  case 38://up
    up = false;
    break;
  case 40://down
    down = false;
    break;
  case 32: //space
    space = false;
    break;
  }
}
